cmake_minimum_required(VERSION 3.10)

option(WITH_ONNXRUNTIME "build _WAV2VEC_ONNXRUNTIME" ON)
option(WITH_LIBSNDFILE "build _LIBSNDFILE_AP" ON)
option(WITH_JSONCPP "build _JSONCPP" ON)
option(WITH_CUDA "build with CUDA support" ON)
option(WITH_CUDA_PREPROCESS "build _WITH_CUDA_PREPROCESS" ON)

if(WITH_CUDA)
    project(wav2vec-emotions LANGUAGES C CXX CUDA)
else()
    project(wav2vec-emotions LANGUAGES C CXX)
endif()

file(GLOB MAIN_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)
file(GLOB SRC_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp)
set(SRCS ${MAIN_SRCS} ${SRC_SRCS})

if(WITH_CUDA AND WITH_CUDA_PREPROCESS)
    file(GLOB CUDA_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/src/cuda/*.cu)
    set(SRCS ${SRCS} ${CUDA_SRCS})
endif()

include_directories(${CMAKE_CURRENT_SOURCE_DIR})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)

if(WITH_CUDA AND WITH_CUDA_PREPROCESS)
    include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include/cuda)
endif()

add_compile_options(-w)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_BUILD_TYPE "Release")

if(WITH_ONNXRUNTIME)
    add_compile_options(-D_WITH_ONNXRUNTIME)
    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/onnxruntime)
        aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/onnxruntime SRCS)
        include_directories(${CMAKE_CURRENT_SOURCE_DIR}/onnxruntime)
    endif()
endif()

if(WITH_LIBSNDFILE)
    add_compile_options(-D_WITH_LIBSNDFILE)
    if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/audio)
        aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/audio SRCS)
        include_directories(${CMAKE_CURRENT_SOURCE_DIR}/audio)
    endif()
endif()

if(WITH_JSONCPP)
    add_compile_options(-D_WITH_JSONCPP)
endif()

if(WITH_CUDA)
    add_compile_options(-D_WITH_CUDA)
    if(WITH_CUDA_PREPROCESS)
        add_compile_options(-D_CUDA_PREPROCESS)
    endif()
endif()

if(CMAKE_SYSTEM_NAME MATCHES "Windows")   
    ERROR( "You can't do that" )
endif()

if(CMAKE_SYSTEM_NAME MATCHES "Linux")
    if(WITH_CUDA)
        find_package(CUDA REQUIRED)
        include_directories(${CUDA_INCLUDE_DIRS})
        cuda_add_executable(wav2vec-emotions ${SRCS})
        target_link_libraries(wav2vec-emotions ${CUDA_LIBRARIES})
    else()
        add_executable(wav2vec-emotions ${SRCS})
    endif()

    if(WITH_ONNXRUNTIME)
        set(ONNXRUNTIME_INCLUDE_DIRS /home/onnxruntime-linux-x64-gpu-1.20.0/include)
        set(ONNXRUNTIME_LIBRARY_DIRS /home/onnxruntime-linux-x64-gpu-1.20.0/lib)
        include_directories(${ONNXRUNTIME_INCLUDE_DIRS})
        target_link_libraries(wav2vec-emotions ${ONNXRUNTIME_LIBRARY_DIRS}/libonnxruntime.so)
    endif()

    if(WITH_LIBSNDFILE)
        find_package(PkgConfig REQUIRED)
        pkg_check_modules(SNDFILE REQUIRED sndfile)
        include_directories(${SNDFILE_INCLUDE_DIRS})
        target_link_libraries(wav2vec-emotions ${SNDFILE_LIBRARIES})
    endif()

    if(WITH_JSONCPP)
        find_package(PkgConfig REQUIRED)
        pkg_check_modules(JSONCPP REQUIRED jsoncpp)
        include_directories(${JSONCPP_INCLUDE_DIRS})
        target_link_libraries(wav2vec-emotions ${JSONCPP_LIBRARIES})
    endif()
endif()